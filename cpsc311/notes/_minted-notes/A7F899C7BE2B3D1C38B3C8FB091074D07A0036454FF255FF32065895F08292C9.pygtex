\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+c1}{;; Effect Abstraction (Exceptions)}

\PYG{c+c1}{;; (raise/eff t v) \PYGZhy{} raise an exception with tag t and payload v}

\PYG{c+c1}{;; (match\PYGZhy{}exn/eff e1}
\PYG{c+c1}{;;  [val (x) e2]}
\PYG{c+c1}{;;  [handle tag (x) e3])}
\PYG{c+c1}{;; \PYGZhy{}\PYGZhy{} dispatch on whether e1 produced a value or an exn}


\PYG{c+c1}{;; Generic Interface (expresses dependencies between computations)}
\PYG{c+c1}{;; (return/eff e) \PYGZhy{} returns the value of e}
\PYG{c+c1}{;; (run/eff e) \PYGZhy{} run an effectful computation, and turn exceptions into}
\PYG{c+c1}{;;               PLAI errors}

\PYG{c+c1}{;; (let/eff ([x e1]) e2) \PYGZhy{} bind x to the value of e1 in e2 or}
\PYG{c+c1}{;;                         propagate an exception from e1}


\PYG{c+c1}{;; Value \PYGZhy{}\PYGZgt{} Computation}
\PYG{p}{(}\PYG{k}{define}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{return/eff}\PYG{+w}{ }\PYG{n}{e}\PYG{p}{)}
\PYG{+w}{  }\PYG{p}{(}\PYG{n}{value}\PYG{+w}{ }\PYG{n}{e}\PYG{p}{))}

\PYG{c+c1}{;; Computation \PYGZhy{}\PYGZgt{} Value}
\PYG{c+c1}{;; Effect: thows an exception if the given computation represents an error}
\PYG{p}{(}\PYG{k}{define}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{run/eff}\PYG{+w}{ }\PYG{n}{c}\PYG{p}{)}
\PYG{+w}{  }\PYG{p}{(}\PYG{n}{type\PYGZhy{}case}\PYG{+w}{ }\PYG{n}{Computation}\PYG{+w}{ }\PYG{n}{c}
\PYG{+w}{    }\PYG{p}{[}\PYG{n}{value}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{v}\PYG{p}{)}\PYG{+w}{ }\PYG{n}{v}\PYG{p}{]}
\PYG{+w}{    }\PYG{p}{[}\PYG{n}{razed}\PYG{+w}{ }\PYG{p}{(}\PYG{k}{tag}\PYG{+w}{ }\PYG{n}{payload}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{(}\PYG{n+nb}{error}\PYG{+w}{ }\PYG{o}{\PYGZsq{}}\PYG{l+s+ss}{interp/tel}\PYG{+w}{ }\PYG{l+s+s2}{\PYGZdq{}Uncaught Exception: \PYGZti{}a\PYGZdq{}}
\PYG{+w}{                                }\PYG{p}{(}\PYG{n}{razed}\PYG{+w}{ }\PYG{k}{tag}\PYG{+w}{ }\PYG{n}{payload}\PYG{p}{))]))}

\PYG{c+c1}{;; uses MACROS!}
\PYG{p}{(}\PYG{k}{define\PYGZhy{}syntax}\PYG{+w}{ }\PYG{n}{let/eff}
\PYG{+w}{  }\PYG{p}{(}\PYG{k}{syntax\PYGZhy{}rules}\PYG{+w}{ }\PYG{p}{()}\PYG{+w}{  }\PYG{c+c1}{;; syntax\PYGZhy{}rules is the weakest macro system, look at syntax\PYGZhy{}case}
\PYG{+w}{    }\PYG{p}{[}\PYG{p}{(}\PYG{k}{\PYGZus{}}\PYG{+w}{ }\PYG{p}{(}\PYG{p}{[}\PYG{n}{x}\PYG{+w}{ }\PYG{n}{e1}\PYG{p}{])}\PYG{+w}{ }\PYG{n}{e2}\PYG{p}{)}
\PYG{+w}{     }\PYG{p}{(}\PYG{n}{type\PYGZhy{}case}\PYG{+w}{ }\PYG{n}{Computation}\PYG{+w}{ }\PYG{n}{e1}
\PYG{+w}{       }\PYG{p}{[}\PYG{n}{value}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{v}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{(}\PYG{k}{let}\PYG{+w}{ }\PYG{p}{(}\PYG{p}{[}\PYG{n}{x}\PYG{+w}{ }\PYG{n}{v}\PYG{p}{])}\PYG{+w}{ }\PYG{n}{e2}\PYG{p}{)]}\PYG{+w}{  }\PYG{c+c1}{;; v is automatically gensymmed}
\PYG{+w}{                                     }\PYG{c+c1}{;; C preprocessor doesn\PYGZsq{}t understand}
\PYG{+w}{                                     }\PYG{c+c1}{;; scope, so doesn\PYGZsq{}t gensym}
\PYG{+w}{       }\PYG{p}{[}\PYG{n}{razed}\PYG{+w}{ }\PYG{p}{(}\PYG{k}{tag}\PYG{+w}{ }\PYG{n}{payload}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{razed}\PYG{+w}{ }\PYG{k}{tag}\PYG{+w}{ }\PYG{n}{payload}\PYG{p}{)])]))}


\PYG{c+c1}{;; Compose many computations}
\PYG{p}{(}\PYG{k}{define\PYGZhy{}syntax}\PYG{+w}{ }\PYG{n}{let/eff*}
\PYG{+w}{    }\PYG{p}{(}\PYG{k}{syntax\PYGZhy{}rules}\PYG{+w}{ }\PYG{p}{()}
\PYG{+w}{    }\PYG{p}{[}\PYG{p}{(}\PYG{k}{\PYGZus{}}\PYG{+w}{ }\PYG{p}{()}\PYG{+w}{ }\PYG{n}{e}\PYG{p}{)}\PYG{+w}{ }\PYG{n}{e}\PYG{p}{]}\PYG{+w}{  }\PYG{c+c1}{;; needs a base case, this is a recursive macro}
\PYG{+w}{    }\PYG{p}{[}\PYG{p}{(}\PYG{k}{\PYGZus{}}\PYG{+w}{ }\PYG{p}{(}\PYG{p}{[}\PYG{n}{x}\PYG{+w}{ }\PYG{n}{e1}\PYG{p}{]}\PYG{+w}{ }\PYG{p}{[}\PYG{n}{x*}\PYG{+w}{ }\PYG{n}{e1*}\PYG{p}{]}\PYG{+w}{ }\PYG{k}{...}\PYG{p}{)}\PYG{+w}{ }\PYG{n}{e2}\PYG{p}{)}
\PYG{+w}{    }\PYG{p}{(}\PYG{n}{let/eff}\PYG{+w}{ }\PYG{p}{(}\PYG{p}{[}\PYG{n}{x}\PYG{+w}{ }\PYG{n}{e1}\PYG{p}{])}
\PYG{+w}{                }\PYG{p}{(}\PYG{n}{let/eff*}\PYG{+w}{ }\PYG{p}{(}\PYG{p}{[}\PYG{n}{x*}\PYG{+w}{ }\PYG{n}{e1*}\PYG{p}{]}\PYG{+w}{ }\PYG{k}{...}\PYG{p}{)}\PYG{+w}{ }\PYG{n}{e2}\PYG{p}{))]))}
\PYG{c+c1}{;; peerful effects needs low level implementation from your end}

\end{Verbatim}
